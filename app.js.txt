// Firebase Configuration - Replace with your own Firebase project config
const firebaseConfig = {
  apiKey: "AIzaSyAmgOL0tYT-18VcfVmZ2CK5_79XfRLLAzs",
  authDomain: "my-expense-tracker-9d0f9.firebaseapp.com",
  projectId: "my-expense-tracker-9d0f9",
  storageBucket: "my-expense-tracker-9d0f9.firebasestorage.app",
  messagingSenderId: "384865958037",
  appId: "1:384865958037:web:0cfa22e56aaef3dfe9439c",
  measurementId: "G-E526DX0EVW"
};

// Data Storage
let appData = {
    transactions: [],
    accounts: [],
    expenseCategories: [],
    incomeCategories: [],
    accountTypes: [],
    settings: { currency: '₹' }
};

let currentMonth = new Date();
let currentTransactionType = 'expense';
let charts = {};

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    console.log('App initializing...');
    loadDataFromStorage();
    setupEventListeners();
    render();
});

// LocalStorage utilities
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log(`Saved ${key} to localStorage`);
    } catch (e) {
        console.error('Failed to save:', e);
    }
}

function loadFromStorage(key, defaultValue = []) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : defaultValue;
    } catch (e) {
        console.error('Failed to load:', e);
        return defaultValue;
    }
}

// Load data from localStorage
function loadDataFromStorage() {
    appData.transactions = loadFromStorage('transactions', []);
    appData.accounts = loadFromStorage('accounts', []);
    appData.expenseCategories = loadFromStorage('expenseCategories', []);
    appData.incomeCategories = loadFromStorage('incomeCategories', []);
    appData.accountTypes = loadFromStorage('accountTypes', []);
    appData.settings = loadFromStorage('settings', { currency: '₹' });

    // Initialize with sample data if empty
    if (appData.accounts.length === 0) {
        initializeSampleData();
    }
}

// Initialize sample data
function initializeSampleData() {
    console.log('Initializing sample data...');

    // Account types
    appData.accountTypes = [
        { id: 'type1', name: 'Bank Account', icon: '🏦', color: '#4CAF50' },
        { id: 'type2', name: 'Credit Card', icon: '💳', color: '#F44336' },
        { id: 'type3', name: 'Cash', icon: '💵', color: '#FF9800' },
        { id: 'type4', name: 'Investment', icon: '📈', color: '#2196F3' }
    ];

    // Accounts
    appData.accounts = [
        {
            id: 'acc1',
            name: 'ICICI Salary Account',
            type: 'Bank Account',
            balance: 45000,
            includeInTotal: true
        },
        {
            id: 'acc2',
            name: 'HDFC Credit Card',
            type: 'Credit Card',
            balance: -8500,
            includeInTotal: true,
            creditLimit: 100000,
            billingDay: 15,
            paymentDay: 25
        },
        {
            id: 'acc3',
            name: 'Cash Wallet',
            type: 'Cash',
            balance: 5000,
            includeInTotal: true
        },
        {
            id: 'acc4',
            name: 'PPF Investment',
            type: 'Investment',
            balance: 125000,
            includeInTotal: false
        }
    ];

    // Categories
    appData.expenseCategories = [
        { id: 'exp1', name: 'Food & Dining', color: '#F44336', icon: '🍽️' },
        { id: 'exp2', name: 'Transportation', color: '#2196F3', icon: '🚗' },
        { id: 'exp3', name: 'Shopping', color: '#E91E63', icon: '🛍️' },
        { id: 'exp4', name: 'Bills & Utilities', color: '#FF9800', icon: '💡' },
        { id: 'exp5', name: 'Entertainment', color: '#9C27B0', icon: '🎬' },
        { id: 'exp6', name: 'Healthcare', color: '#4CAF50', icon: '⚕️' }
    ];

    appData.incomeCategories = [
        { id: 'inc1', name: 'Salary', color: '#4CAF50', icon: '💼' },
        { id: 'inc2', name: 'Business', color: '#2196F3', icon: '🏢' },
        { id: 'inc3', name: 'Freelance', color: '#00BCD4', icon: '💻' },
        { id: 'inc4', name: 'Investments', color: '#9C27B0', icon: '📈' },
        { id: 'inc5', name: 'Other', color: '#607D8B', icon: '💰' }
    ];

    // Sample transactions
    const today = new Date();
    appData.transactions = [
        {
            id: generateId(),
            date: formatDate(today),
            type: 'income',
            amount: 50000,
            accountId: 'acc1',
            categoryId: 'inc1',
            description: 'Monthly salary',
            recurring: 'monthly'
        },
        {
            id: generateId(),
            date: formatDate(new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000)),
            type: 'expense',
            amount: 2500,
            accountId: 'acc2',
            categoryId: 'exp1',
            description: 'Grocery shopping',
            recurring: 'none'
        },
        {
            id: generateId(),
            date: formatDate(new Date(today.getTime() - 5 * 24 * 60 * 60 * 1000)),
            type: 'expense',
            amount: 1200,
            accountId: 'acc3',
            categoryId: 'exp2',
            description: 'Auto fare and metro',
            recurring: 'none'
        }
    ];

    saveAllData();
}

// Save all data
function saveAllData() {
    saveToStorage('transactions', appData.transactions);
    saveToStorage('accounts', appData.accounts);
    saveToStorage('expenseCategories', appData.expenseCategories);
    saveToStorage('incomeCategories', appData.incomeCategories);
    saveToStorage('accountTypes', appData.accountTypes);
    saveToStorage('settings', appData.settings);
}

// Setup event listeners
function setupEventListeners() {
    // Tab navigation
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tab = this.dataset.tab;
            switchTab(tab);
        });
    });

    // Month navigation
    document.getElementById('prev-month').addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        renderTransactions();
    });

    document.getElementById('next-month').addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        renderTransactions();
    });

    // Add transaction
    document.getElementById('add-transaction-btn').addEventListener('click', () => {
        openTransactionModal();
    });

    // Transaction form type buttons
    document.querySelectorAll('.type-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            currentTransactionType = this.dataset.type;
            updateCategoryDropdown();
        });
    });

    // Recurring icon
    document.getElementById('recurring-icon').addEventListener('click', () => {
        const dropdown = document.getElementById('recurring-dropdown');
        dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
    });

    // Transaction form submit
    document.getElementById('transaction-form').addEventListener('submit', (e) => {
        e.preventDefault();
        saveTransaction();
    });

    // Add account
    document.getElementById('add-account-btn').addEventListener('click', () => {
        openAccountModal();
    });

    // Account form submit
    document.getElementById('account-form').addEventListener('submit', (e) => {
        e.preventDefault();
        saveAccount();
    });

    // Account type change shows credit card fields
    document.getElementById('acc-type').addEventListener('change', function() {
        const creditFields = document.getElementById('credit-card-fields');
        creditFields.style.display = this.value === 'Credit Card' ? 'block' : 'none';
    });

    // Modal close and cancel buttons
    document.querySelectorAll('.close, .cancel-btn').forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

    // Period selector in analytics
    document.querySelectorAll('.period-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.period-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            renderAnalytics();
        });
    });

    // Settings category add buttons
    document.getElementById('add-expense-category-btn').addEventListener('click', () => {
        const name = prompt('Enter category name:');
        if (name) {
            addCategory('expense', name);
        }
    });

    document.getElementById('add-income-category-btn').addEventListener('click', () => {
        const name = prompt('Enter category name:');
        if (name) {
            addCategory('income', name);
        }
    });

    // Add account type
    document.getElementById('add-account-type-btn').addEventListener('click', () => {
        const name = prompt('Enter account type name:');
        if (name) {
            addAccountType(name);
        }
    });

    // Export and Clear data buttons
    document.getElementById('export-data-btn').addEventListener('click', exportData);
    document.getElementById('clear-data-btn').addEventListener('click', clearAllData);
}

// Tab switching
function switchTab(tab) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-tab="${tab}"]`).classList.add('active');

    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById(`${tab}-screen`).classList.add('active');

    if (tab === 'transactions') renderTransactions();
    else if (tab === 'analytics') renderAnalytics();
    else if (tab === 'accounts') renderAccounts();
    else if (tab === 'settings') renderSettings();
}

// Render all main data views
function render() {
    renderTransactions();
    renderAccounts();
    renderSettings();
}

// Render transactions grouped by day
function renderTransactions() {
    const monthName = currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    document.getElementById('current-month').textContent = monthName;

    const monthTransactions = getMonthTransactions();
    const grouped = groupTransactionsByDay(monthTransactions);

    // Calculate monthly totals
    let totalIncome = 0, totalExpense = 0;
    monthTransactions.forEach(tx => {
        if (tx.type === 'income') totalIncome += tx.amount;
        if (tx.type === 'expense') totalExpense += tx.amount;
    });

    document.getElementById('monthly-income').textContent = formatCurrency(totalIncome);
    document.getElementById('monthly-expense').textContent = formatCurrency(totalExpense);
    document.getElementById('monthly-net').textContent = formatCurrency(totalIncome - totalExpense);

    // Render grouped transactions
    const listEl = document.getElementById('transactions-list');
    listEl.innerHTML = '';

    if (Object.keys(grouped).length === 0) {
        listEl.innerHTML = '<div class="empty-state"><h3>No transactions this month</h3><p>Add your first transaction using the + button</p></div>';
        return;
    }

    Object.keys(grouped).sort((a, b) => new Date(b) - new Date(a)).forEach(date => {
        const dayGroup = document.createElement('div');
        dayGroup.className = 'day-group';

        const dateObj = new Date(date);
        const dayName = getDayName(dateObj);

        // Day header
        const header = document.createElement('div');
        header.className = 'day-header';
        header.textContent = dayName;
        dayGroup.appendChild(header);

        // Day summary
        const transactions = grouped[date];
        let dayIncome = 0, dayExpense = 0;
        transactions.forEach(tx => {
            if (tx.type === 'income') dayIncome += tx.amount;
            if (tx.type === 'expense') dayExpense += tx.amount;
        });

        const summary = document.createElement('div');
        summary.className = 'day-summary';
        summary.innerHTML = `
            <span class="income">Income: ${formatCurrency(dayIncome)}</span>
            <span class="expense">Expense: ${formatCurrency(dayExpense)}</span>
            <span class="net">Net: ${formatCurrency(dayIncome - dayExpense)}</span>
        `;
        dayGroup.appendChild(summary);

        // Transaction items
        transactions.forEach(tx => {
            const item = createTransactionItem(tx);
            dayGroup.appendChild(item);
        });

        listEl.appendChild(dayGroup);
    });
}

// Create transaction item element
function createTransactionItem(tx) {
    const category = getCategory(tx.categoryId, tx.type);
    const account = getAccount(tx.accountId);

    const item = document.createElement('div');
    item.className = 'transaction-item';

    item.innerHTML = `
        <div class="transaction-info">
            <div class="transaction-desc">${category?.icon || ''} ${tx.description}</div>
            <div class="transaction-meta">${category?.name || ''} • ${account?.name || ''}</div>
        </div>
        <div class="transaction-amount ${tx.type}">${formatCurrency(tx.amount)}</div>
    `;

    return item;
}

// Render accounts with financial summary
function renderAccounts() {
    // Calculate financial summary
    let assets = 0, liabilities = 0;
    appData.accounts.forEach(acc => {
        if (acc.includeInTotal) {
            if (acc.balance >= 0) {
                assets += acc.balance;
            } else {
                liabilities += Math.abs(acc.balance);
            }
        }
    });

    document.getElementById('total-assets').textContent = formatCurrency(assets);
    document.getElementById('total-liabilities').textContent = formatCurrency(liabilities);
    document.getElementById('net-worth').textContent = formatCurrency(assets - liabilities);

    // Render accounts list
    const listEl = document.getElementById('accounts-list');
    listEl.innerHTML = '';

    appData.accounts.forEach(acc => {
        const item = document.createElement('div');
        item.className = 'account-item';

        const balanceClass = acc.balance >= 0 ? 'positive' : 'negative';

        item.innerHTML = `
            <div class="account-info">
                <h3>${acc.name}</h3>
                <p>${acc.type}</p>
            </div>
            <div class="account-balance ${balanceClass}">${formatCurrency(Math.abs(acc.balance))}</div>
        `;

        listEl.appendChild(item);
    });
}

// Render analytics screen
function renderAnalytics() {
    const period = document.querySelector('.period-btn.active').dataset.period;
    const transactions = getTransactionsByPeriod(period);

    let totalIncome = 0, totalExpense = 0;
    transactions.forEach(tx => {
        if (tx.type === 'income') totalIncome += tx.amount;
        if (tx.type === 'expense') totalExpense += tx.amount;
    });

    document.getElementById('analytics-income').textContent = formatCurrency(totalIncome);
    document.getElementById('analytics-expense').textContent = formatCurrency(totalExpense);
    document.getElementById('analytics-net').textContent = formatCurrency(totalIncome - totalExpense);

    renderCharts(transactions);
}

// Render charts using Chart.js
function renderCharts(transactions) {
    const expenses = transactions.filter(tx => tx.type === 'expense');

    // Category distribution
    const categoryData = {};
    expenses.forEach(tx => {
        const cat = getCategory(tx.categoryId, 'expense');
        if (cat) {
            categoryData[cat.name] = (categoryData[cat.name] || 0) + tx.amount;
        }
    });

    const pieCtx = document.getElementById('pie-chart');
    if (charts.pie) charts.pie.destroy();
    charts.pie = new Chart(pieCtx, {
        type: 'pie',
        data: {
            labels: Object.keys(categoryData),
            datasets: [{
                data: Object.values(categoryData),
                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true
        }
    });

    // Income vs Expenses line chart
    const lineCtx = document.getElementById('line-chart');
    if (charts.line) charts.line.destroy();

    const last6Months = [];
    const incomeData = [];
    const expenseData = [];

    for (let i = 5; i >= 0; i--) {
        const date = new Date();
        date.setMonth(date.getMonth() - i);
        const monthName = date.toLocaleDateString('en-US', { month: 'short' });
        last6Months.push(monthName);

        const monthTx = appData.transactions.filter(tx => {
            const txDate = new Date(tx.date);
            return txDate.getMonth() === date.getMonth() && txDate.getFullYear() === date.getFullYear();
        });

        let income = 0, expense = 0;
        monthTx.forEach(tx => {
            if (tx.type === 'income') income += tx.amount;
            if (tx.type === 'expense') expense += tx.amount;
        });

        incomeData.push(income);
        expenseData.push(expense);
    }

    charts.line = new Chart(lineCtx, {
        type: 'line',
        data: {
            labels: last6Months,
            datasets: [
                {
                    label: 'Income',
                    data: incomeData,
                    borderColor: '#4CAF50',
                    backgroundColor: 'rgba(76, 175, 80, 0.1)'
                },
                {
                    label: 'Expenses',
                    data: expenseData,
                    borderColor: '#F44336',
                    backgroundColor: 'rgba(244, 67, 54, 0.1)'
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true
        }
    });
}

// Render categories lists for settings
function renderSettings() {
    renderCategoriesList('expense');
    renderCategoriesList('income');
    renderAccountTypesList();
}

function renderCategoriesList(type) {
    const categories = type === 'expense' ? appData.expenseCategories : appData.incomeCategories;
    const listEl = document.getElementById(`${type}-categories-list`);
    listEl.innerHTML = '';

    categories.forEach(cat => {
        const tag = document.createElement('div');
        tag.className = 'category-tag';
        tag.style.backgroundColor = cat.color + '20';
        tag.style.color = cat.color;
        tag.textContent = `${cat.icon} ${cat.name}`;
        listEl.appendChild(tag);
    });
}

function renderAccountTypesList() {
    const listEl = document.getElementById('account-types-list');
    listEl.innerHTML = '';

    appData.accountTypes.forEach(type => {
        const tag = document.createElement('div');
        tag.className = 'category-tag';
        tag.style.backgroundColor = type.color + '20';
        tag.style.color = type.color;
        tag.textContent = `${type.icon} ${type.name}`;
        listEl.appendChild(tag);
    });
}

// Modal controls
function openTransactionModal() {
    document.getElementById('transaction-modal').classList.add('show');
    document.getElementById('tx-date').valueAsDate = new Date();
    updateAccountDropdown();
    updateCategoryDropdown();
}

function updateAccountDropdown() {
    const select = document.getElementById('tx-account');
    select.innerHTML = '<option value="">Select account</option>';

    appData.accounts.forEach(acc => {
        const option = document.createElement('option');
        option.value = acc.id;
        option.textContent = acc.name;
        select.appendChild(option);
    });
}

function updateCategoryDropdown() {
    const categories = currentTransactionType === 'income' ? appData.incomeCategories : appData.expenseCategories;
    const select = document.getElementById('tx-category');
    select.innerHTML = '<option value="">Select category</option>';

    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat.id;
        option.textContent = `${cat.icon} ${cat.name}`;
        select.appendChild(option);
    });
}

function saveTransaction() {
    const transaction = {
        id: generateId(),
        date: document.getElementById('tx-date').value,
        type: currentTransactionType,
        amount: parseFloat(document.getElementById('tx-amount').value),
        accountId: document.getElementById('tx-account').value,
        categoryId: document.getElementById('tx-category').value,
        description: document.getElementById('tx-description').value,
        recurring: document.getElementById('tx-recurring').value
    };

    appData.transactions.push(transaction);
    saveAllData();
    closeModals();
    renderTransactions();
}

function openAccountModal() {
    document.getElementById('account-modal').classList.add('show');
    updateAccountTypeDropdown();
}

function updateAccountTypeDropdown() {
    const select = document.getElementById('acc-type');
    select.innerHTML = '<option value="">Select type</option>';

    appData.accountTypes.forEach(type => {
        const option = document.createElement('option');
        option.value = type.name;
        option.textContent = `${type.icon} ${type.name}`;
        select.appendChild(option);
    });
}

function saveAccount() {
    const account = {
        id: generateId(),
        name: document.getElementById('acc-name').value,
        type: document.getElementById('acc-type').value,
        balance: parseFloat(document.getElementById('acc-balance').value),
        includeInTotal: document.getElementById('acc-include').checked
    };

    if (account.type === 'Credit Card') {
        account.creditLimit = parseFloat(document.getElementById('acc-credit-limit').value) || 0;
        account.billingDay = parseInt(document.getElementById('acc-billing-day').value) || 1;
        account.paymentDay = parseInt(document.getElementById('acc-payment-day').value) || 1;
    }

    appData.accounts.push(account);
    saveAllData();
    closeModals();
    renderAccounts();
}

function addCategory(type, name) {
    const category = {
        id: generateId(),
        name: name,
        color: getRandomColor(),
        icon: getRandomIcon()
    };

    if (type === 'expense') {
        appData.expenseCategories.push(category);
    } else {
        appData.incomeCategories.push(category);
    }

    saveAllData();
    renderSettings();
}

function addAccountType(name) {
    const type = {
        id: generateId(),
        name: name,
        icon: getRandomIcon(),
        color: getRandomColor()
    };

    appData.accountTypes.push(type);
    saveAllData();
    renderSettings();
}

function generateId() {
    return 'id_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function formatDate(date) {
    return date.toISOString().split('T')[0];
}

function formatCurrency(amount) {
    return appData.settings.currency + amount.toLocaleString('en-IN');
}

function getAccount(id) {
    return appData.accounts.find(acc => acc.id === id);
}

function getCategory(id, type) {
    const categories = type === 'income' ? appData.incomeCategories : appData.expenseCategories;
    return categories.find(cat => cat.id === id);
}

function getMonthTransactions() {
    return appData.transactions.filter(tx => {
        const txDate = new Date(tx.date);
        return txDate.getMonth() === currentMonth.getMonth() &&
               txDate.getFullYear() === currentMonth.getFullYear();
    });
}

function groupTransactionsByDay(transactions) {
    const grouped = {};
    transactions.forEach(tx => {
        if (!grouped[tx.date]) grouped[tx.date] = [];
        grouped[tx.date].push(tx);
    });
    return grouped;
}

function getDayName(date) {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) return 'Today';
    if (date.toDateString() === yesterday.toDateString()) return 'Yesterday';
    return date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' });
}

function getTransactionsByPeriod(period) {
    const now = new Date();
    return appData.transactions.filter(tx => {
        const txDate = new Date(tx.date);
        switch (period) {
            case 'day':
                return txDate.toDateString() === now.toDateString();
            case 'week':
                const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                return txDate >= weekAgo;
            case 'month':
                return txDate.getMonth() === now.getMonth() &&
                       txDate.getFullYear() === now.getFullYear();
            case 'year':
                return txDate.getFullYear() === now.getFullYear();
            default:
                return true;
        }
    });
}

function getRandomColor() {
    const colors = ['#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
                   '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50'];
    return colors[Math.floor(Math.random() * colors.length)];
}

function getRandomIcon() {
    const icons = ['💰', '🏦', '💳', '💵', '📊', '📈', '🎯', '🎁', '🍔', '🚗'];
    return icons[Math.floor(Math.random() * icons.length)];
}

function closeModals() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.classList.remove('show');
    });
    document.querySelectorAll('form').forEach(form => form.reset());
}

function exportData() {
    const dataStr = JSON.stringify(appData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'expense-tracker-data.json';
    link.click();
}

function clearAllData() {
    if (confirm('Are you sure you want to clear all data? This cannot be undone.')) {
        localStorage.clear();
        location.reload();
    }
}